import org.gradle.api.tasks.JavaExec

buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
        springCloudVersion = 'Edgware.SR2'
    }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'sup-auth'
    version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.apache.commons:commons-collections4:4.1")
    compile("commons-io:commons-io:2.6")
    compile("org.apache.commons:commons-lang3:3.7")
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')

//    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    compile("org.springframework.cloud:spring-cloud-starter-security")
    compile('org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE')

//Zipkin
    compile('org.springframework.cloud:spring-cloud-starter-sleuth:2.0.0.M9')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin:2.0.0.M9')

// HYSTRIX
//    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.0.0.M8')
//    compile('org.springframework.cloud:spring-cloud-netflix-hystrix-stream:2.0.0.M8')

//    compile("com.nghia.tut.utils:nghia-libraries:1.0") {
//        exclude module: 'spring-boot-starter-amqp'
//        exclude module: 'spring-boot-starter-tomcat'
////        exclude module: 'spring-boot-starter-data-mongodb'
//        exclude module: 'spring-boot-starter-web'
//    }
    runtime('org.springframework.boot:spring-boot-devtools')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


tasks.withType(JavaExec) {
    if (System.getProperty('debug', '0') == '1') {
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=35036"]
    }
}


bootRun {
//    systemProperties = System.properties
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
}